import {miscUtils}                                                      from '@berry/core';

import {LocationBlacklistData, LocationLengthData, PackageRegistryData} from './types';
import {PackageStoreData, PnpSettings, SerializedState}                 from './types';

function generatePackageRegistryData(settings: PnpSettings): PackageRegistryData {
  const packageRegistryData: PackageRegistryData = [];

  for (const [packageName, packageStore] of miscUtils.sortMap(settings.packageRegistry, ([packageName]) => packageName === null ? `0` : `1${packageName}`)) {
    const packageStoreData: PackageStoreData = [];
    packageRegistryData.push([packageName, packageStoreData]);

    for (const [packageReference, {packageLocation, packageDependencies}] of miscUtils.sortMap(packageStore, ([packageReference]) => packageReference === null ? `0` : `1${packageReference}`)) {
      const normalizedDependencies: Array<[string, string]> = [];

      if (packageName !== null && packageReference !== null && !packageDependencies.has(packageName))
        normalizedDependencies.push([packageName, packageReference]);

      for (const [dependencyName, dependencyReference] of miscUtils.sortMap(packageDependencies.entries(), ([dependencyName]) => dependencyName))
        normalizedDependencies.push([dependencyName, dependencyReference]);

      packageStoreData.push([packageReference, {
        packageLocation,
        packageDependencies: normalizedDependencies,
      }]);
    }
  }

  return packageRegistryData;
}

function generateLocationBlacklistData(settings: PnpSettings): LocationBlacklistData {
  return miscUtils.sortMap(settings.blacklistedLocations || [], location => location);
}

function generateLocationLengthData(settings: PnpSettings): LocationLengthData {
  const lengths = new Set();

  for (const packageInformationStore of settings.packageRegistry.values())
    for (const {packageLocation} of packageInformationStore.values())
      if (packageLocation !== null)
        lengths.add(packageLocation.length);

  return Array.from(lengths).sort((a, b) => b - a);
}

export function generateSerializedState(settings: PnpSettings): SerializedState {
  const data: any = {};

  data.__info = [
    `This file is automatically generated. Do not touch it, or risk`,
    `your modifications being lost. We also recommend you not to read`,
    `it either without using the @berry/pnp package, as the data layout`,
    `is entirely unspecified and WILL change from a version to another.`,
  ];

  data.packageRegistryData = generatePackageRegistryData(settings);
  data.locationBlacklistData = generateLocationBlacklistData(settings);
  data.locationLengthData = generateLocationLengthData(settings);

  return data;
}